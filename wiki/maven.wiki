maven3 
eclipse 插件 命令行 优先
动态部署web工程
mvn 打包不包括lib

====查看工程中的依赖关系====
{{{
mvn dependency:tree
}}}

====创建新工程,工程范围限制为内部====
{{{
mvn archetype:generate -DarchetypeCatalog=internal
}}}

====直接将jar安装到本地库中====
{{{
mvn install:install-file -Dfile=C:/Users/Amar/Desktop/lib/json/morphia-0.99.jar -DgroupId=com.google.code 
-DartifactId=morphia -Dversion=0.99 -Dpackaging=jar  -DgeneratePom=true -DcreateChecksum=true
}}}

====指定范围====
{{{
<dependency>
	<groupId>javax.servlet</groupId>
	<artifactId>servlet-api</artifactId>
	<version>2.4</version>
	<scope>provided</scope>
</dependency>
}}}
====打包时排除====
{{{
<build>
<resources>
	<resource>
		<directory>src/main/resources</directory>
		<filtering>true</filtering>
	</resource>
</resources>
</build>
}}}

====指定nexus私服，maven安装目录下conf/settings.xml====
{{{
<mirrors>  
    <mirror>
      <id>nexus</id>
      <mirrorOf>*</mirrorOf>
      <name>amar-depot</name>
      <url>http://192.168.8.233:8098/nexus/content/repositories/maven-depot</url>
    </mirror>    
  </mirrors>
  <profiles>   
    <profile>
      <id>nexus</id>
		<repositories>
			<repository>
			  <id>central</id>
			  <url>http://central</url>
			  <releases><enabled>true</enabled></releases>
			  <snapshots><enabled>true</enabled></snapshots>
			</repository>
		</repositories>	  
		<pluginRepositories>
			<pluginRepository>
				<id>central</id>
				<url>http://central</url>
				<releases><enabled>true</enabled></releases>
				<snapshots><enabled>true</enabled></snapshots>
			</pluginRepository>
		</pluginRepositories>
	</profile>  
 </profiles>
}}}


====部署到远程的tomcat中,第一次部署使用命令 mvn cargo:deploy , 以后使用 mvn cargo:redeploy====
{{{
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.amar.web</groupId>
  <artifactId>amar-web</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  
  	<properties>
		<springframework.version>3.1.0.RELEASE</springframework.version>
		<junit.version>4.7</junit.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<tomcat.manager>http://${tomcat.host}:${tomcat.port}/manager/html</tomcat.manager> 
	</properties>

	<profiles>    
        <profile>    
            <id>dev</id>    
            <activation>    
                <activeByDefault>true</activeByDefault>    
            </activation>    
            <properties>    
                <tomcat.host>192.168.0.105</tomcat.host>    
                <tomcat.port>80</tomcat.port>    
                <tomcat.server>development</tomcat.server>    
                <tomcat.manager.username>tomcat</tomcat.manager.username>    
                <tomcat.manager.password>tomcat</tomcat.manager.password>    
            </properties>    
        </profile>    
    </profiles> 

	<build>
		<finalName>MySpring</finalName>
		<sourceDirectory>src/main/java</sourceDirectory>
		<outputDirectory>target/WEB-INF/classes</outputDirectory>
		
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-war-plugin</artifactId>
					<configuration>
						<webappDirectory>target/</webappDirectory>
						<packagingExcludes>WEB-INF/web.xml</packagingExcludes>
						<warSourceDirectory>src/main/webapp</warSourceDirectory>
						<source>1.6</source> 
          				<target>1.6</target> 
          				<encoding>UTF-8</encoding> 
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven2-plugin</artifactId>
					<version>1.0</version>
					<configuration>
							<container>
									<containerId>tomcat6x</containerId>
									<type>remote</type>
							</container>
							<configuration>
									<type>runtime</type>
									<properties>
										<cargo.tomcat.manager.url>${tomcat.manager}</cargo.tomcat.manager.url>    
										<cargo.remote.username>${tomcat.manager.username}</cargo.remote.username>    
										<cargo.remote.password>${tomcat.manager.password}</cargo.remote.password>    
									</properties>
							</configuration>
							<deployer>    
								<type>remote</type>    
								<deployables>    
									<deployable>    
										<groupId>${project.groupId}</groupId>    
										<artifactId>${project.artifactId}</artifactId>    
										<type>war</type>    
										<pingURL>http://${tomcat.host}:${tomcat.port}/cargocpc/index.html</pingURL>    
									 <properties>    
										<!-- deployer是部署时的相关配置，这个context是用来声明工程部署后的上下文，也就是主机地址后面的一级目录位置。这个设置在maven构建中还是很必要的。因为maven默认打出的war包是工程名+版本号，部署时如果不设置这里的context，那上下文就变成了工程名+版本号的形式。这会使访问变得很不方便。注意，即使你通过修改war插件中的warName也是不能达到这个目的，因为cargo认定的默认war包名就是工程名+版本号的形式。也可以利用finalName来制定  -->  
									<context>${project.artifactId}</context>    
									</properties>    
									</deployable>    
								</deployables>    
							</deployer>    
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

		<dependencies>
					
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
				<version>2.4</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet.jsp</groupId>
				<artifactId>jsp-api</artifactId>
				<version>2.0</version>
				<scope>provided</scope>
			</dependency>
		
			<dependency> 
				<groupId>com.google.code</groupId>
				<artifactId>morphia</artifactId>
				<version>0.99</version>  
			</dependency> 
			<dependency> 
				<groupId>org.mongodb</groupId>
				<artifactId>mongo-java-driver</artifactId>
				<version>2.5</version>  
			</dependency>
			<dependency> 
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>
				<version>1.5</version>  
			</dependency>
			<dependency> 
				<groupId>org.quartz-scheduler</groupId>
				<artifactId>quartz</artifactId>
				<version>1.8.5</version>  
			</dependency> 
			<dependency> 
				<groupId>net.sf.json-lib</groupId>
				<artifactId>json-lib</artifactId>
				<classifier>jdk15</classifier>
				<version>2.3</version>  
			</dependency> 
			<dependency>  
				<groupId>org.apache.poi</groupId>
				<artifactId>poi</artifactId> 
				<version>3.6</version> 
			</dependency> 
			<dependency> 
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${springframework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${springframework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${springframework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${springframework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${springframework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${springframework.version}</version>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	
 
</project>
}}}